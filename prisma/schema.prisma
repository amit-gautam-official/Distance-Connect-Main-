// Prisma Client Generator
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

// MongoDB Database Connection
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// üßë‚Äçüíª User Model
model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String?

  email         String    @unique
  name          String?
  password      String?
  image         String?
  emailVerified DateTime?

  accounts     Account[]
  role         Role      @default(USER)
  isRegistered Boolean   @default(false)

  // Relations (One-to-One)
  student Student?
  mentor  Mentor?
  startup Startup?
  message chatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
}

// Enum for User Role
enum Role {
  USER
  STUDENT
  MENTOR
  STARTUP
  ADMIN
}

enum SrudentRole {
  HIGHSCHOOL
  COLLEGE
  WORKING
}

// üéì Student Model
model Student {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique @db.ObjectId
  linkedinUrl String?

  studentRole SrudentRole?
  studentName String?
  phoneNumber String?      @default("XXXXXXXXXX")

  //High School
  institutionName String?
  pinCode         Int?
  state           String?
  interestFields  String[]

  //College
  courseSpecialization String?

  //Working
  companyName String?
  jobTitle    String?
  experience  String?
  industry    String?

  scheduledMeetings   ScheduledMeetings[]
  chatRooms           ChatRoom[]
  orders              RazorpayOrder[]
  workshopEnrollments WorkshopEnrollment[]
  hasUsedFreeSession  Boolean              @default(false)
  referralRequests    ReferralRequest[] // New relation for referral requests

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üßë‚Äçüè´ Mentor Model
model Mentor {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @unique @db.ObjectId
  linkedinUrl String?

  mentorTier              String?
  mentorSessionPriceRange String?
  tierReasoning           String?

  mentorName           String?
  currentCompany       String?
  jobTitle             String?
  experience           String?
  industry             String?
  pinCode              Int?
  state                String?
  hiringFields         String[]
  companyType          String
  bio                  String?
  education            Json[]
  wholeExperience      Json[] // Array of objects
  skills               String[]
  profileBanner        String?
  companyEmail         String?
  companyEmailVerified Boolean             @default(false)
  verified             Boolean             @default(false)
  messageFromAdmin     String?
  mentorPhoneNumber    String?             @default("XXXXXXXXXX")
  meetingEvents        MeetingEvent[]
  availability         Availability?
  scheduledMeetings    ScheduledMeetings[]
  chatRooms            ChatRoom[]
  workshops            Workshop[]
  bankDetails          MentorBankDetails?
  referralRequests     ReferralRequest[] // New relation for referral requests
  referralOfferings    ReferralOffering[] // Relation for referral offerings

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  pending
  completed
  failed
  refunded
}

model RazorpayOrder {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  scheduledMeetingId String?            @db.ObjectId
  scheduledMeeting   ScheduledMeetings? @relation(fields: [scheduledMeetingId], references: [id], onDelete: SetNull)

  workshopEnrollmentId String?             @db.ObjectId
  workshopEnrollment   WorkshopEnrollment? @relation(fields: [workshopEnrollmentId], references: [id], onDelete: SetNull)

  referralRequestId String?          @db.ObjectId
  referralRequest   ReferralRequest? @relation(fields: [referralRequestId], references: [id], onDelete: SetNull) // New relation for referral payments

  status            OrderStatus @default(pending)
  razorpayOrderId   String      @unique
  razorpayPaymentId String?
  amount            Int // Amount in paise (e.g., 700 for ‚Çπ7.00)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student       Student? @relation(fields: [studentUserId], references: [userId])
  studentUserId String?  @db.ObjectId
}

// üöÄ Startup Model
model Startup {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  comapanyName   String?
  companyUrl     String?
  industry       String?
  pinCode        Int?
  state          String?
  interestFields String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üìÖ MeetingEvent Model
model MeetingEvent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId], onDelete: Cascade)
  mentorUserId String @db.ObjectId

  eventName   String
  duration    Int
  description String?
  meetEmail   String

  eventPrice Int? // Price in paise (e.g., 700 for ‚Çπ7.00)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId])
  mentorUserId String @unique @db.ObjectId

  daysAvailable Json
  bufferTime    Int  @default(15) // Default buffer time of 15 minutes between meetings

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduledMeetings {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId], onDelete: Cascade)
  mentorUserId String @db.ObjectId

  student       Student @relation(fields: [studentUserId], references: [userId], onDelete: Cascade)
  studentUserId String  @db.ObjectId

  feedback           String?
  star               Int?
  selectedTime       String
  selectedDate       DateTime
  formatedDate       String
  formatedTimeStamp  String
  duration           Int
  meetUrl            String?
  eventId            String
  eventName          String
  userNote           String
  userEmailForMeet   String
  mentorEmailForMeet String
  completed          Boolean  @default(false)

  paymentStatus            Boolean @default(false)
  isFreeSession            Boolean @default(true) // Indicates if the session is free or paid
  receivedPaymentFromAdmin Boolean @default(false) // Flag for admin payment to mentor

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  RazorpayOrder RazorpayOrder[]
}

model ChatRoom {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId], onDelete: Cascade)
  mentorUserId String @db.ObjectId

  student       Student @relation(fields: [studentUserId], references: [userId], onDelete: Cascade)
  studentUserId String  @db.ObjectId

  lastMessage        String
  mentorUnreadCount  Int           @default(0)
  studentUnreadCount Int           @default(0)
  chatMessages       chatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mentorUserId, studentUserId], name: "mentor_student_index")
}

model chatMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  senderId   String
  senderRole String
  message    String?

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String   @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  imageName String?
  imagePath String?
  fileName  String?

  type String @default("TEXT")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatRoomId, createdAt], name: "chatRoom_createdAt_index")
}

// üìö Workshop Model
model Workshop {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  mentor       Mentor @relation(fields: [mentorUserId], references: [userId], onDelete: Cascade)
  mentorUserId String @db.ObjectId

  name                 String
  description          String
  numberOfDays         Int
  bannerImage          String?
  introVideo           String?
  scheduleType         String               @default("recurring") // "recurring" or "custom"
  startDate            DateTime? // Start date for recurring schedule
  schedule             Json[] // Array of objects with day and time for recurring, or date and time for custom
  price                Int // Price in paise (e.g., 70000 for ‚Çπ700.00)
  learningOutcomes     String[]
  courseDetails        Json
  otherDetails         String?
  meetLinks            Json? // Map of day index to meet link and scheduled date
  introductoryVideoUrl String? // New field for introductory video URL
  mentorGmailId        String // Changed to required for Google Meet integration
  enrollments          WorkshopEnrollment[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

// üìù Workshop Enrollment Model
model WorkshopEnrollment {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  workshop       Workshop @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  workshopId     String   @db.ObjectId
  studentGmailId String?

  student       Student @relation(fields: [studentUserId], references: [userId], onDelete: Cascade)
  studentUserId String  @db.ObjectId

  paymentStatus            Boolean         @default(false)
  receivedPaymentFromAdmin Boolean         @default(false) // Flag for admin payment to mentor
  orders                   RazorpayOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workshopId, studentUserId])
}

model Waitlist {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email String  @unique
  name  String?
  phone String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New model for mentor bank details
model MentorBankDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId], onDelete: Cascade)
  mentorUserId String @unique @db.ObjectId

  accountHolderName String
  bankName          String
  accountNumber     String
  ifscCode          String
  bankBranch        String  @default("Not Provided")
  panNumber         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// üéØ New Referral System Models

// Status enum for referral requests
enum ReferralStatus {
  INITIATED // Initial state after payment of ‚Çπ99
  RESUME_REVIEW // Mentor is reviewing the resume
  CHANGES_REQUESTED // Mentor requested changes to resume
  APPROVED_FOR_REFERRAL // Mentor approved to send referral
  REFERRAL_SENT // Mentor has sent referral to company
  UNDER_REVIEW // Company is reviewing the referral
  REFERRAL_ACCEPTED // Company accepted the referral
  REFERRAL_REJECTED // Company rejected the referral
  PAYMENT_PENDING // Final payment pending from student
  COMPLETED // Referral process complete
}

// Model for Referral Requests
model ReferralRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  student       Student @relation(fields: [studentUserId], references: [userId], onDelete: Cascade)
  studentUserId String  @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId], onDelete: Cascade)
  mentorUserId String @db.ObjectId

  // Resume and other documents
  resumeUrl      String?
  coverLetterUrl String?

  // Referral details
  companyName        String?
  positionName       String?
  jobLink            String?
  referralProofUrl   String? // URL to proof of referral (screenshot, email, etc.)
  acceptanceProofUrl String? // URL to proof of acceptance

  // Status tracking
  status                 ReferralStatus @default(INITIATED)
  mentorFeedback         String? // Feedback from mentor on resume
  mentorChangesRequested String? // Specific changes requested by mentor

  // Payment tracking
  initiationFeeAmount String     @default("9900") // ‚Çπ99 in paise
  initiationFeePaid   Boolean @default(false)
  finalFeeAmount      String? // Final referral fee in paise (decided later)
  finalFeePaid        Boolean @default(false)

  // Related orders
  orders RazorpayOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentUserId, mentorUserId], name: "student_mentor_index")
  @@index([status], name: "referral_status_index")
}

// Model for Referral Offerings
model ReferralOffering {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  mentor       Mentor @relation(fields: [mentorUserId], references: [userId], onDelete: Cascade)
  mentorUserId String @db.ObjectId

  // Offering details
  title               String
  description         String
  companiesCanReferTo String[] // List of companies mentor can refer to
  positions           String[] // List of positions mentor can refer for
  referralSuccess     Int      @default(0) // Number of successful referrals
  isActive            Boolean  @default(true)

  // Pricing
  initiationFeeAmount String @default("9900") // ‚Çπ99 in paise
  finalFeeAmount      String @default("199900") // ‚Çπ1999 in paise

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([mentorUserId], name: "referral_offering_mentor_index")
}
